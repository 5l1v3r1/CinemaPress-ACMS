<div class="spacer-40"></div>

<footer id="footer-main" class="footer-sticky">
    <div class="footer-main-inner">
        <div class="pull-left hidden-xs">
            <p>©&nbsp;<a href="https://CinemaPress.org/" target="_blank">CinemaPress ACMS</a></p>
        </div>
        <div class="pull-left visible-xs">
            <p>©&nbsp;<a href="https://CinemaPress.org/" target="_blank">CP</a></p>
        </div>
        <div class="pull-right">
            <a href="javascript:void(0)" class="btn btn-info" id="save">
                <span class="fa fa-floppy-o"></span>&nbsp;&nbsp;Сохранить&nbsp;изменения
            </a>
            <a href="javascript:void(0)" class="btn" id="toggle-footer"> <i class="fa fa-chevron-down"></i> </a>
        </div>
    </div>
</footer>

<script>

    document.addEventListener('DOMContentLoaded', function() {

        var i = 0;

        var status = document.querySelectorAll('.module-status');
        if (status)
            for (i = 0; i < status.length; i++)
                status[i].addEventListener('click', statusData);

        var save = document.querySelector('#save');
        if (save)
            save.addEventListener('click', saveData);

        var restart = document.querySelector('#restart');
        if (restart)
            restart.addEventListener('click', restartData);

        var flush = document.querySelector('#flush');
        if (flush)
            flush.addEventListener('click', flushData);

        var flush_static = document.querySelector('#flush_static');
        if (flush_static)
            flush_static.addEventListener('click', flushStaticData);

        var flush_memcached = document.querySelector('#flush_memcached');
        if (flush_memcached)
            flush_memcached.addEventListener('click', flushMemcachedData);

        var image = document.querySelector('#image');
        if (image)
            image.addEventListener('click', imageData);

        var database = document.querySelector('#database');
        if (database)
            database.addEventListener('click', databaseData);

        var del = document.querySelectorAll('.del');
        if (del)
            for (i = 0; i < del.length; i++)
                del[i].addEventListener('click', delData);

        var addId = document.querySelectorAll('a[data-add-name]');
        if (addId)
            for (i = 0; i < addId.length; i++)
                addId[i].addEventListener('click', addIdList);

        var delId = document.querySelectorAll('li[data-delete-name]');
        if (delId)
            for (i = 0; i < delId.length; i++)
                delId[i].addEventListener('click', delIdList);

        articlesCP();

        inputData();

        uploadImage();

        uploadPicture();

        translit();

    });

    function statusData() {

        var self = this;
        self.removeEventListener('click', statusData);
        self.innerHTML = '<span class="fa fa-spinner fa-spin"></span>&nbsp;&nbsp;Изменяется&nbsp;статус';

        var data = {
            "switch": {
                "module": self.dataset.module,
                "status": self.dataset.status
            }
        };

        sendServer(data, function (err, result) {
            if (err) {
                self.innerHTML = '<span class="fa fa-bug"></span>&nbsp;&nbsp;' + err;
            }
            else {
                location.reload();
            }
        });

    }

    function restartData() {

        var self = this;
        self.removeEventListener('click', restartData);
        self.innerHTML = '<span class="fa fa-spinner fa-spin"></span>&nbsp;&nbsp;Перезагружается';

        var data = {
            "restart": true
        };

        sendServer(data, function () {
            self.innerHTML ='<span class="fa fa-repeat"></span>&nbsp;&nbsp;Перезагрузить';
            self.addEventListener('click', restartData);
        });

    }

    function flushData() {

        var self = this;
        self.removeEventListener('click', flushData);
        self.innerHTML = '<span class="fa fa-refresh fa-spin"></span>&nbsp;&nbsp;Очищается&nbsp;кэш';

        var data = {
            "flush": true
        };

        var stop = false;

        sendServer(data, function (err, result) {
            stop = true;
            if (err) {
                self.innerHTML = '<span class="fa fa-bug"></span>&nbsp;&nbsp;' + err;
            }
            else {
                self.innerHTML ='<span class="fa fa-trash-o"></span>&nbsp;&nbsp;Очистить&nbsp;кэш';
                self.addEventListener('click', flushData);
            }
        });

        setTimeout(function() {
            if (stop) return;
            location.reload();
        }, 1000*10);
    }

    function flushStaticData() {

        var self = this;
        self.removeEventListener('click', flushStaticData);
        self.innerHTML = '<i class="fa fa-refresh fa-spin"></i>';

        var data = {
            "flush_static": true
        };

        var stop = false;

        sendServer(data, function (err, result) {
            stop = true;
            if (err) {
                self.innerHTML = '<i class="fa fa-bug"></i>';
            }
            else {
                self.innerHTML ='<i class="fa fa-picture-o"></i>';
                self.addEventListener('click', flushStaticData);
            }
        });

        setTimeout(function() {
            if (stop) return;
            location.reload();
        }, 1000*10);

    }

    function flushMemcachedData() {

        var self = this;
        self.removeEventListener('click', flushMemcachedData);
        self.innerHTML = '<i class="fa fa-refresh fa-spin"></i>';

        var data = {
            "flush_memcached": true
        };

        var stop = false;

        sendServer(data, function (err, result) {
            stop = true;
            if (err) {
                self.innerHTML = '<i class="fa fa-bug"></i>';
            }
            else {
                self.innerHTML ='<i class="fa fa-tachometer"></i>';
                self.addEventListener('click', flushMemcachedData);
            }
        });

        setTimeout(function() {
            if (stop) return;
            location.reload();
        }, 1000*10);

    }

    function imageData() {

        var self = this;
        self.removeEventListener('click', imageData);
        self.innerHTML = '<span class="fa fa-spinner fa-spin"></span>&nbsp;&nbsp;Загружаются&nbsp;(около&nbsp;5&nbsp;часов)';

        var data = {
            "image": true
        };

        sendServer(data, true, function (err, result) {
            if (err) {
                self.innerHTML = '<span class="fa fa-bug"></span>&nbsp;&nbsp;' + err;
            }
            else {
                self.innerHTML ='<span class="fa fa-picture-o"></span>&nbsp;&nbsp;Картинки&nbsp;загружены';
            }
        });

        setTimeout(function() {
            window.location.href = "<%- config.protocol %><%- config.domain %>/<%- config.urls.admin %>";
        }, 1000*20);

    }

    function databaseData() {

        <% if (config.database.key == 'FREE') { %>
            if (!confirm('База закрепится на сервере за доменом ' + '<%- config.domain %>'.toUpperCase() + '\nИмпорт делается только один раз, дальнейшие импорты - это обновления.')) {
                return;
            }
        <% } %>

        var key = document.querySelector('#key');

        if (!key || !key.value) return;

        var self = this;
        self.removeEventListener('click', databaseData);
        self.innerHTML = '<span class="fa fa-spinner fa-spin"></span>&nbsp;&nbsp;Загружаются&nbsp;(около&nbsp;10&nbsp;минут)';

        var data = {
            "database": key.value
        };

        sendServer(data, true, function (err, result) {
            if (err) {
                self.innerHTML = '<span class="fa fa-bug"></span>&nbsp;&nbsp;' + err;
            }
            else {
                setTimeout(function() {
                    self.innerHTML ='<span class="fa fa-spinner fa-spin"></span>&nbsp;&nbsp;Перезагрузка';
                    var data = {
                        "restart": true
                    };
                    sendServer(data, function () {
                        window.location.href = "<%- config.protocol %><%- config.domain %>/<%- config.urls.admin %>";
                    });
                }, 15000);
                setTimeout(function() {
                    window.location.href = "<%- config.protocol %><%- config.domain %>/<%- config.urls.admin %>";
                }, 20000);
            }
        });

        setTimeout(function() {
            window.location.href = "<%- config.protocol %><%- config.domain %>/<%- config.urls.admin %>";
        }, 1000*60*10);

    }

    function delData() {

        var self = this;
        self.removeEventListener('click', delData);
        self.innerHTML = '<span class="fa fa-spinner fa-spin"></span>';

        var data = {};
        data.delete = true;
        data[self.dataset.type] = {};
        if (self.dataset.type === 'collection') {
            data[self.dataset.type].url = self.dataset.id;
        }
        else {
            data[self.dataset.type].id = self.dataset.id;
        }

        sendServer(data, function (err, result) {
            if (err) {
                self.innerHTML = '<span class="fa fa-bug"></span>&nbsp;&nbsp;' + err;
            }
            else {
                self.innerHTML ='<span class="fa fa-check"></span>';
            }
        });

    }

    function delIdList() {
        var self = this;
        self.parentNode.removeChild(self);
        var list = document.querySelector('textarea[name="' + self.dataset.deleteName + '"]');
        var first = new RegExp('^' + self.dataset.deleteId + ',');
        var middle = new RegExp(',' + self.dataset.deleteId + ',|^' + self.dataset.deleteId + '$');
        var last = new RegExp(',' + self.dataset.deleteId + '$');
        list.value = list.value
                .replace(middle, ',')
                .replace(first, '')
                .replace(last, '')
                .replace(/\s/g, '')
                .replace(/,+/g, ',')
                .replace(/(^,*)|(,*)$/g, '');
    }

    function addIdList() {
        var self = this;
        var id = document.querySelector('input[data-add-id="' + self.dataset.addName + '"]');
        var kp_id = parseInt(id.value);
        var id_kp = 0;

        if (id.value.indexOf('<%- config.domain %>')+1) {

            var prefix_id = '<%- config.urls.prefix_id %>' || '/';
            var regexpId  = new RegExp(prefix_id + '([0-9]{1,7})', 'ig');
            var execId    = regexpId.exec(id.value);
            id_kp     = (execId) ? parseInt(execId[1]) : 0;

            kp_id = parseInt(id_kp) - parseInt(<%- config.urls.unique_id %>);
        }
        else if (id.value.indexOf('kinopoisk.ru')+1) {
            id_kp = /(film\/|movie\/).*?([0-9]{3,7})\//gi.exec(id.value);
            kp_id = (id_kp) ? parseInt(id_kp[2]) : 0;
        }

        if (kp_id) {
            var addPoster = document.querySelector('ul[data-add-name="' + self.dataset.addName + '"]');
            var addList = document.querySelector('textarea[name="' + self.dataset.addName + '"]');
            var ids = addList.value.split(',');
            ids = (ids.length && ids[0]) ? ids.map(function (id) {return parseInt(id)}) : [];
            if (!(ids.indexOf(kp_id)+1)) {
                if (id.dataset.last) {ids.push(kp_id);} else {ids.unshift(kp_id);}
                addList.value = ids.join(',');
                addPoster.innerHTML = (id.dataset.last ? addPoster.innerHTML : '') + '<li data-delete-id="' + kp_id + '" data-delete-name="' + self.dataset.addName + '"><img class="media-object" src="https://cdn.cinemapress.org/images/sm_film/' + kp_id + '.jpg" alt="ID: ' + kp_id + '" title="ID: ' + kp_id + '"></li>' + (!id.dataset.last ? addPoster.innerHTML : '');
                var delId = document.querySelectorAll('li[data-delete-name]');
                if (delId)
                    for (var i = 0; i < delId.length; i++)
                        delId[i].addEventListener('click', delIdList);
            }
        }

        id.value = '';
    }

    function saveData() {

        var configs = document.querySelectorAll('input[name],select[name],textarea[name]');

        if (!configs || !configs.length) return false;

        var self = this;
        self.removeEventListener('click', saveData);
        self.innerHTML = '<span class="fa fa-spinner fa-spin"></span>&nbsp;&nbsp;Сохраняются&nbsp;изменения';

        var data = {};

        for (var i = 0; i < configs.length; i++) {

            if (configs[i].getAttribute('type')) {
                if (configs[i].getAttribute('type') === 'checkbox' && !configs[i].checked) {
                    continue;
                }
                else if (configs[i].getAttribute('type') === 'radio' && !configs[i].checked) {
                    continue;
                }
            }

            if (!configs[i].value) {
                if (
                        configs[i].getAttribute('type') &&
                        configs[i].getAttribute('type') === 'checkbox'
                ) { console.log('Empty checkbox.'); }
                else if (
                        configs[i].name === 'collection.image'
                ) { console.log('Empty collection.'); }
                else if (
                        configs[i].name === 'config.codes.head' ||
                        configs[i].name === 'config.codes.footer' ||
                        configs[i].name === 'config.publish.thematic.country' ||
                        configs[i].name === 'config.publish.thematic.genre' ||
                        configs[i].name === 'config.publish.thematic.year' ||
                        configs[i].name === 'config.publish.thematic.type' ||
                        configs[i].name === 'config.publish.thematic.actor' ||
                        configs[i].name === 'config.publish.thematic.director' ||
                        configs[i].name === 'config.publish.thematic.query_id' ||
                        configs[i].name === 'config.publish.thematic.search' ||
                        configs[i].name === 'config.index.country.keys' ||
                        configs[i].name === 'config.index.genre.keys' ||
                        configs[i].name === 'config.index.year.keys' ||
                        configs[i].name === 'config.index.type.keys' ||
                        configs[i].name === 'config.index.actor.keys' ||
                        configs[i].name === 'config.index.director.keys' ||
                        configs[i].name === 'config.index.ids.keys' ||
                        configs[i].name === 'config.index.count.key' ||
                        configs[i].name === 'config.urls.prefix_id' ||
                        configs[i].name === 'config.urls.noindex' ||
                        configs[i].name === 'config.urls.movies.online' ||
                        configs[i].name === 'config.urls.movies.download' ||
                        configs[i].name === 'config.urls.movies.trailer' ||
                        configs[i].name === 'config.urls.movies.picture'
                ) { console.log('Empty config.'); }
                else if (
                        configs[i].name === 'modules.content.data.index.url' ||
                        configs[i].name === 'modules.content.data.side.tags' ||
                        configs[i].name === 'modules.content.data.auto.moonwalk_movies' ||
                        configs[i].name === 'modules.content.data.auto.moonwalk_serials' ||
                        configs[i].name === 'modules.content.data.auto.hdgo_movies' ||
                        configs[i].name === 'modules.content.data.auto.hdgo_serials' ||
                        configs[i].name === 'modules.content.data.auto.kodik_movies' ||
                        configs[i].name === 'modules.content.data.auto.kodik_serials' ||
                        configs[i].name === 'modules.comments.data.cackle.id' ||
                        configs[i].name === 'modules.comments.data.hypercomments.widget_id' ||
                        configs[i].name === 'modules.comments.data.hypercomments.sekretkey' ||
                        configs[i].name === 'modules.comments.data.disqus.shortname' ||
                        configs[i].name === 'modules.comments.data.disqus.api_key' ||
                        configs[i].name === 'modules.comments.data.facebook.admins' ||
                        configs[i].name === 'modules.comments.data.vk.app_id' ||
                        configs[i].name === 'modules.comments.data.gplus.admins' ||
                        configs[i].name === 'modules.comments.data.sigcomments.host_id' ||
                        configs[i].name === 'modules.social.data.gplus' ||
                        configs[i].name === 'modules.social.data.twitter' ||
                        configs[i].name === 'modules.social.data.facebook' ||
                        configs[i].name === 'modules.social.data.vk' ||
                        configs[i].name === 'modules.social.data.youtube' ||
                        configs[i].name === 'modules.social.data.instagram' ||
                        configs[i].name === 'modules.player.data.yohoho.player' ||
                        configs[i].name === 'modules.player.data.yohoho.bg' ||
                        configs[i].name === 'modules.player.data.yohoho.button' ||
                        configs[i].name === 'modules.player.data.hdgo.token' ||
                        configs[i].name === 'modules.player.data.moonwalk.token' ||
                        configs[i].name === 'modules.player.data.moonlight.domain' ||
                        configs[i].name === 'modules.player.data.youtube.token' ||
                        configs[i].name === 'modules.player.data.kodik.token' ||
                        configs[i].name === 'modules.player.data.hdbaza.user_hash' ||
                        configs[i].name === 'modules.blocking.data.share.message' ||
                        configs[i].name === 'modules.blocking.data.sub.message' ||
                        configs[i].name === 'modules.blocking.data.adv.code' ||
                        configs[i].name === 'modules.blocking.data.adv.message' ||
                        configs[i].name === 'modules.blocking.data.adv.skip' ||
                        configs[i].name === 'modules.blocking.data.adblock.message' ||
                        configs[i].name === 'modules.blocking.data.legal.countries' ||
                        configs[i].name === 'modules.blocking.data.legal.message' ||
                        configs[i].name === 'modules.soon.data.movies' ||
                        configs[i].name === 'modules.abuse.data.movies' ||
                        configs[i].name === 'modules.abuse.data.imap.user' ||
                        configs[i].name === 'modules.abuse.data.imap.password' ||
                        configs[i].name === 'modules.abuse.data.imap.host' ||
                        configs[i].name === 'modules.abuse.data.imap.port' ||
                        configs[i].name === 'modules.episode.data.translate' ||
                        configs[i].name === 'modules.slider.data.movies' ||
                        configs[i].name.indexOf('modules.adv.data.desktop')+1 ||
                        configs[i].name.indexOf('modules.adv.data.mobile')+1
                ) { console.log('Empty modules.'); }
                else if (
                        configs[i].name.indexOf('movie.')+1
                ) { console.log('Empty movie.'); }
                else {
                    continue;
                }
            }

            var objects = configs[i].name.split('.');

            for (var j = 1; j <= objects.length; j++) {

                if (j === 1) {
                    data[objects[0]] = (j === objects.length)
                            ? (data[objects[0]])
                            ? data[objects[0]] + ',' + configs[i].value
                            : configs[i].value
                            : data[objects[0]] || {};
                }
                else if (j === 2) {
                    data[objects[0]][objects[1]] = (j === objects.length)
                            ? (data[objects[0]][objects[1]])
                            ? data[objects[0]][objects[1]] + ',' + configs[i].value
                            : configs[i].value
                            : data[objects[0]][objects[1]] || {};
                }
                else if (j === 3) {
                    data[objects[0]][objects[1]][objects[2]] = (j === objects.length)
                            ? (data[objects[0]][objects[1]][objects[2]])
                            ? data[objects[0]][objects[1]][objects[2]] + ',' + configs[i].value
                            : configs[i].value
                            : data[objects[0]][objects[1]][objects[2]] || {};
                }
                else if (j === 4) {
                    data[objects[0]][objects[1]][objects[2]][objects[3]] = (j === objects.length)
                            ? (data[objects[0]][objects[1]][objects[2]][objects[3]])
                            ? data[objects[0]][objects[1]][objects[2]][objects[3]] + ',' + configs[i].value
                            : configs[i].value
                            : data[objects[0]][objects[1]][objects[2]][objects[3]] || {};
                }
                else if (j === 5) {
                    data[objects[0]][objects[1]][objects[2]][objects[3]][objects[4]] = (j === objects.length)
                            ? (data[objects[0]][objects[1]][objects[2]][objects[3]][objects[4]])
                            ? data[objects[0]][objects[1]][objects[2]][objects[3]][objects[4]] + ',' + configs[i].value
                            : configs[i].value
                            : data[objects[0]][objects[1]][objects[2]][objects[3]][objects[4]] || {};
                }
                else if (j === 6) {
                    data[objects[0]][objects[1]][objects[2]][objects[3]][objects[4]][objects[5]] = (j === objects.length)
                            ? (data[objects[0]][objects[1]][objects[2]][objects[3]][objects[4]][objects[5]])
                            ? data[objects[0]][objects[1]][objects[2]][objects[3]][objects[4]][objects[5]] + ',' + configs[i].value
                            : configs[i].value
                            : data[objects[0]][objects[1]][objects[2]][objects[3]][objects[4]][objects[5]] || {};
                }

            }

        }

        if (data.content && data.content.content_movies && data.content.content_movies.split(',').length > 100) {
            self.innerHTML = '<span class="fa fa-exclamation-triangle text-danger"></span>&nbsp;&nbsp;Желательно&nbsp;не&nbsp;больше&nbsp;100&nbsp;фильмов';
        }

        if (data.movie && data.movie.id && data.movie.kp_id && data.movie.id !== data.movie.kp_id) {
            data.movie.id = data.movie.kp_id;
        }

        if (data.movie && data.movie.player) {
            data.movie.player = data.movie.player.replace(/.*src="(.*?)".*/i, '$1');
            data.movie.player = data.movie.player.replace(/.*youtube.com\/watch\?v=(.*?).*?/i, 'https://www.youtube.com/embed/$1');
        }

        if (data.content && data.content.content_description) {
            data.content.content_description = data.content.content_description.replace(/\n/ig, '<br>');
        }

        if (data.movie && data.movie.description) {
            data.movie.description = data.movie.description.replace(/\n/ig, '<br>');
        }

        sendServer(data, function (err, result) {
            if (data.config && data.config.urls && data.config.urls.admin && data.config.urls.admin !== '<%- config.urls.admin %>' && data.config.urls.admin.indexOf('admin') !== -1) {
                location.href = '<%- config.protocol + config.domain + '/' %>' + data.config.urls.admin;
            }
            else if (data.content && !data.content.id) {
                location.href = '<%- config.protocol + config.domain + '/' + config.urls.admin + '/content' %>';
            }
            else if (data.movie && !data.movie.id) {
                location.href = '<%- config.protocol + config.domain + '/' + config.urls.admin + '/movies' %>';
            }
            else if (data.config && data.config.theme && data.config.theme !== '<%- config.theme %>') {
                self.innerHTML = '<span class="fa fa-floppy-o"></span>&nbsp;&nbsp;Сохранить&nbsp;изменения';
                self.addEventListener('click', saveData);
            }
            else if (err) {
                self.innerHTML = '<span class="fa fa-bug"></span>&nbsp;&nbsp;' + err;
            }
            else {
                self.innerHTML = '<span class="fa fa-floppy-o"></span>&nbsp;&nbsp;Сохранить&nbsp;изменения';
                self.addEventListener('click', saveData);
            }
        });

    }

    function sendServer(data, long, callback) {

        if (arguments.length === 2) {
            callback = long;
            long = false;
        }

        setTimeout(minTimeout, 1000);

        function minTimeout() {

            var status = '';
            var result = '';
            var state = '';

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/<%- config.urls.admin %>/change', true);
            xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');
            xhr.onreadystatechange = function () {
                status = xhr.status;
                result = xhr.responseText;
                state = xhr.readyState;
                if (xhr.readyState === 4 && xhr.status === 200) {
                    return callback(null, xhr.responseText);
                }
            };
            xhr.send(JSON.stringify(data));

            if (!long) {
                setTimeout(function () {
                    if (state === 4 && status !== 200) {
                        console.log('Site error:', status, result);
                        return callback('Ошибка&nbsp;сайта');
                    }
                    else if (state !== 4) {
                        console.log('Server error:', status, result);
                        return callback('Ошибка&nbsp;сервера');
                    }
                }, 15000);
            }

        }

    }

    function articlesCP() {

        var xhr = new XMLHttpRequest();
        xhr.open('GET', 'https://cinemapress.org/article/articles.json', true);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {

                var result = JSON.parse(xhr.responseText);

                if (result && result.articles) {
                    var articlesCP = document.getElementById('articlesCP');

                    if (!articlesCP) return;

                    var ul = document.createElement('ul');
                    ul.setAttribute('style', 'position: absolute; margin:0; padding:0; top:0;');

                    var articles = result.articles[Math.floor(Math.random() * result.articles.length)];

                    var li = document.createElement('li');
                    li.setAttribute('style', 'margin:0; padding:0; height: 30px;');
                    var i = document.createElement('i');
                    var a = document.createElement('a');
                    a.setAttribute('href', articles.link);
                    a.setAttribute('target', '_blank');
                    a.textContent = articles.title;
                    i.appendChild(a);
                    li.appendChild(i);
                    ul.appendChild(li);
                    articlesCP.appendChild(ul);

                    var mainBottom = document.querySelector('.header-main-bottom');
                    if (mainBottom) {
                        var style = '';
                        if (articles.background) {
                            style += 'background: ' + articles.background + ';';
                        }
                        if (articles.style) {
                            style += articles.style;
                        }
                        mainBottom.setAttribute('style', style);
                    }
                }

            }
        };
        xhr.send();

    }

    function inputData() {

        var i = 0;

        var counts = document.querySelectorAll('.keywords,.titles,.descriptions');
        if (counts && counts.length) {
            for (i = 0; i < counts.length; i++) {
                var n = document.getElementById(counts[i].name);
                if (n)
                    n.textContent = ((counts[i].value.replace(/(\s+|<.*?>)/g, '')).length).toString();
                counts[i].oninput = function () {
                    document.getElementById(this.name).textContent = ((this.value.replace(/(\s+|<.*?>)/g, '')).length).toString();
                };
            }
        }

        var codes = document.querySelectorAll('.codes');
        if (codes && codes.length) {
            for (i = 0; i < codes.length; i++) {
                codes[i].addEventListener('click', function () {
                    var data_name = this.getAttribute('data-name');
                    var data_code = this.getAttribute('data-code');
                    var caret_pos = 0;
                    var textarea = document.getElementsByName(data_name)[0];
                    if (document.selection) {
                        textarea.focus();
                        var sel = document.selection.createRange();
                        sel.moveStart ('character', -textarea.value.length);
                        caret_pos = sel.text.length;
                    } else if (textarea.selectionStart || parseInt(textarea.selectionStart) === 0) {
                        caret_pos = textarea.selectionStart;
                    }
                    textarea.value = textarea.value.slice(0,caret_pos) + data_code + textarea.value.slice(caret_pos);
                    textarea.focus();
                });
            }
        }

        var input_number = document.querySelectorAll('.input_number');
        if (input_number && input_number.length) {
            for (i = 0; i < input_number.length; i++) {
                input_number[i].oninput = function () {
                    var value = this.value;
                    var rep = /[^0-9\-]/;
                    if (rep.test(value)) {
                        value = value.replace(rep, '');
                        this.value = value;
                    }
                };
            }
        }

        var input_url = document.querySelectorAll('.input_url');
        if (input_url && input_url.length) {
            for (i = 0; i < input_url.length; i++) {
                input_url[i].oninput = function () {
                    var value = this.value;
                    var rep = /[^0-9A-Za-z_.\-]/;
                    if (rep.test(value)) {
                        value = value.replace(rep, '');
                        this.value = value;
                    }
                };
            }
        }

        var input_ids = document.querySelectorAll('.input_ids');
        if (input_ids && input_ids.length) {
            for (i = 0; i < input_ids.length; i++) {
                input_ids[i].oninput = function () {
                    var value = this.value;
                    var rep = /[^0-9,]/;
                    if (rep.test(value)) {
                        value = value.replace(rep, '');
                        this.value = value;
                    }
                };
            }
        }

    }

    function uploadImage() {
        var formUploadImage = document.forms.namedItem('formUploadImage');
        var nameUploadImage = document.querySelector('#nameUploadImage');
        if (formUploadImage && nameUploadImage) {
            nameUploadImage.addEventListener('change', function () {
                var formData = new FormData(formUploadImage);
                var req = new XMLHttpRequest();
                req.open('POST', '/<%- config.urls.admin %>/upload', true);
                req.onload = function () {
                    if (req.readyState === 4 && req.status === 200) {
                        var uploadMessage = JSON.parse(req.responseText);
                        var textPathImage = document.querySelector('#textPathImage');
                        var page_image = document.querySelector('input[name="' + textPathImage.getAttribute('name') + '"]');
                        if (uploadMessage.error) {
                            console.log(uploadMessage.error);
                            return;
                        }
                        page_image.value = uploadMessage.file;
                        var pageImage = document.querySelector('#blockPathImage');
                        pageImage.setAttribute('class', 'col-lg-12 col-xs-12 text-center');
                        var uploadImage = document.querySelector('#blockUploadImage');
                        uploadImage.style.display = 'none';
                    }
                }
                req.send(formData);
                var image = document.querySelector('#nameUploadImage');
                var mySpan = document.createElement('span');
                mySpan.innerHTML = '<div style="float: left;" id="nameUploadImage"><a href="javascript:void(0)" class="btn btn-default"><span class="fa fa-spinner fa-spin"></span></a></div>';
                image.parentNode.replaceChild(mySpan, image);
            });
        }
    }

    function uploadPicture() {
        var formUploadPicture = document.forms.namedItem('formUploadPicture');
        var nameUploadPicture = document.querySelector('#nameUploadPicture');
        if (formUploadPicture && nameUploadPicture) {
            nameUploadPicture.addEventListener('change', function () {
                var formData = new FormData(formUploadPicture);
                var req = new XMLHttpRequest();
                req.open('POST', '/<%- config.urls.admin %>/upload', true);
                req.onload = function () {
                    if (req.readyState === 4 && req.status === 200) {
                        var uploadMessage = JSON.parse(req.responseText);
                        var textPathPicture = document.querySelector('#textPathPicture');
                        var page_picture = document.querySelector('input[name="' + textPathPicture.getAttribute('name') + '"]');
                        if (uploadMessage.error) {
                            console.log(uploadMessage.error);
                            return;
                        }
                        page_picture.value = (page_picture.value.indexOf('/')+1)
                            ? uploadMessage.file + ',' + page_picture.value
                            : uploadMessage.file;
                        var loadingPicture = document.querySelector('#loadingPicture');
                        loadingPicture.innerHTML = ' URL кадров: ';
                    }
                }
                req.send(formData);
                var loadingPicture = document.querySelector('#loadingPicture');
                loadingPicture.innerHTML = '<span class="fa fa-spinner fa-spin"></span>';
            });
        }
    }

    function translit() {
        var content_title = document.querySelector('input[name="content.content_title"]');
        if (!content_title) return;
        content_title.oninput = function () {
            var str = content_title.value;
            var space = '-';
            var link = '';
            var transl = {
                'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'e', 'ж': 'zh',
                'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n',
                'о': 'o', 'п': 'p', 'р': 'r','с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h',
                'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'sh','ъ': space,
                'ы': 'y', 'ь': space, 'э': 'e', 'ю': 'yu', 'я': 'ya'
            }
            if (str != '')
                str = str.toLowerCase();

            for (var i = 0; i < str.length; i++) {
                if (/[а-яё]/.test(str.charAt(i))) {
                    link += transl[str.charAt(i)];
                } else if (/[a-z0-9]/.test(str.charAt(i))) {
                    link += str.charAt(i);
                } else {
                    if (link.slice(-1) !== space) link += space;
                }
            }
            document.querySelector('input[name="content.content_url"]').value = link;
        }
    }

</script>